# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type User {
	id: Int
	name: String!
	email: String!
	password: String!
	phoneNumber: String
	avatar: String
}

input NewUser {
	name: String!
	email: String!
	password: String!
	phoneNumber: String
	avatar: String
}

input UpdateUser {
	name: String
	email: String
	password: String
	phoneNumber: String
	avatar: String
}

type LoginResponse {
	message: String!
	id: Int!
	name: String!
	email: String!
	token: String!
}

type Event {
	id: Int
	name: String!
	username: String!
	host: String!
	description: String!
	datetime: String!
	location: String!
	category: String!
	photo: String!
}

input NewEvent {
	name: String!
	userid: Int
	host: String!
	description: String!
	datetime: String!
	location: String!
	category: String!
	photo: String!
}

input UpdateEvent {
	name: String
	host: String
	description: String
	datetime: String
	location: String
	category: String
	photo: String
}

type SuccessResponse {
	code: Int!
	message: String!
}

type Participant {
	name: String!
	avatar: String!
}

type Comment {
	id: Int
	userId: Int!
	name: String!
	avatar: String!
	content: String!
	createdAt: String!
}

type eventResponse {
	event: [Event!]
	totalPage: Int!
}

type Query {
	users: [User!]
	userById(id: Int!): User
	authLogin(email: String!, password: String!): LoginResponse!

	events(page: Int!): [Event!]
	eventByHostId(userId: Int!): [Event!]
	eventByLocation(location: String!, page: Int!): eventResponse!
	eventByKeyword(keyword: String!, page: Int!): eventResponse!
	eventByCategory(category: String!, page: Int!): eventResponse!
	eventByParticipantId(userId: Int!): [Event!]
	eventById(id: Int!): Event

	participants(eventId: Int!): [Participant]

	comments(eventId: Int!): [Comment]
}

type Mutation {
	createUser(input: NewUser!): User!
	updateUser(id: Int!, set: UpdateUser!): User!
	deleteUser(id: Int!): SuccessResponse!

	createEvent(input: NewEvent!): Event!
	updateEvent(id: Int!, set: UpdateEvent!): Event!
	deleteEvent(id: Int!): SuccessResponse!

	createComment(eventId: Int!, input: String!): Comment!
	deleteComment(commentId: Int!): SuccessResponse!

	joinEvent(eventId: Int!): SuccessResponse!
	unjoinEvent(eventId: Int!): SuccessResponse!
}

# membuat type schema gql (done)
# membuat interface repo (bikin satu function)
# membuat repo sintaks sql (bikin satu function)
# kondisikan di schema resolver yang make pagination
# perbaiki readme buat semua yang pake page ganti responnya
